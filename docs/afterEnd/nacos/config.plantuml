@startuml Nacos 配置变更与推送原理
' 参与者定义
actor 配置管理员Admin as Admin
participant "Nacos 控制台" as Console
participant "Nacos 服务器" as Server
participant "Nacos Clinet SDK" as SDK
actor 业务应用Application as App

' 样式定义
skinparam participant {
  BackgroundColor #f0f8ff
  BorderColor #2c3e50
}
skinparam actor {
  BackgroundColor #e8f4fd
  BorderColor #2980b9
}
skinparam note {
  BackgroundColor #fff3cd
  BorderColor #f39c12
}

== 1. 初始配置拉取 ==
App -> SDK: 调用 getConfig(dataId, group)
SDK -> SDK: 检查本地缓存\n(路径：${user.home}/nacos/config)
alt 缓存有效
  SDK --> App: 返回本地缓存配置
else 缓存无效/不存在
  SDK -> Server: HTTP GET /nacos/v1/cs/configs\n(携带dataId、group)
  Server -> Server: 1. 查询配置\n2. 计算MD5
  Server --> SDK: 返回配置内容 + MD5
  SDK -> SDK: 1. 更新本地文件缓存\n2. 记录MD5
  SDK --> App: 返回最新配置
end

== 2. 配置监听（长轮询核心） ==
App -> SDK: 调用 addListener(dataId, listener)
SDK -> Server: 长轮询请求\nHTTP GET /nacos/v1/cs/configs/listener\n(超时30秒，携带本地MD5)
note over SDK, Server: 长轮询：请求挂起，等待变更或超时

== 3. 配置变更触发 ==
Admin -> Console: 控制台修改并发布配置
Console -> Server: HTTP POST /nacos/v1/cs/configs\n(提交新配置)
Server -> Server: 1. 更新配置存储\n2. 计算新MD5\n3. 标记"已变更"
Server --> Console: 返回发布成功

== 4. 变更推送与处理 ==
Server -> SDK: 长轮询响应（返回变更的dataId）
SDK -> Server: 拉取新配置\nHTTP GET /nacos/v1/cs/configs\n(携带dataId、group)
Server --> SDK: 返回新配置 + 新MD5
SDK -> SDK: 1. 更新本地缓存\n2. 对比MD5确认变更
SDK --> App: 触发 listener 回调（返回新配置）

' 持续监听循环
SDK -> Server: 立即发起下一次长轮询
note over SDK, Server: 循环长轮询，保持实时监听
@enduml