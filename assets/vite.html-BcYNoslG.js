import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as t,o as a}from"./app-B_bvwj15.js";const l={};function n(h,i){return a(),e("div",null,[...i[0]||(i[0]=[t(`<h1 id="vite" tabindex="-1"><a class="header-anchor" href="#vite"><span>Vite</span></a></h1><p>优势:</p><ul><li>一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能</li><li>使用 Rollup 打包你的代码</li><li>Vite 天然支持引入 .ts 文件。</li></ul><h2 id="项目模板" tabindex="-1"><a class="header-anchor" href="#项目模板"><span>项目模板</span></a></h2><p>vue /react vue-ts/react-ts</p><h2 id="cli" tabindex="-1"><a class="header-anchor" href="#cli"><span>CLI</span></a></h2><ul><li>vite(同 vite dev/ vite serve) 启动开发服务器</li><li>vite build 打包</li></ul><h2 id="ts" tabindex="-1"><a class="header-anchor" href="#ts"><span>ts</span></a></h2><h3 id="vite-client" tabindex="-1"><a class="header-anchor" href="#vite-client"><span>vite/client</span></a></h3><p>Vite 默认的类型定义是写给它的 Node.js API ,要将其补充到一个 Vite 应用的客户端代码环境中 需要手动让 ts 编译器 获取到 vite/client</p><h2 id="plugin" tabindex="-1"><a class="header-anchor" href="#plugin"><span>plugin</span></a></h2><ul><li>@vitejs/plugin-vue vite 为 Vue 提供第一优先级支持</li><li>@vitejs/plugin-vue-jsx 提供对 JSX / TSX 支持</li></ul><h2 id="css" tabindex="-1"><a class="header-anchor" href="#css"><span>css</span></a></h2><ul><li><p>导入 .css 文件将会把内容插入到 <code>&lt;style&gt;</code> 标签中</p></li><li><p>能够自动读取项目目录下 css预处理器配置文件 比如 <code>postcss.config.js</code></p></li><li><p>任何以 .module.css 为后缀名的 CSS 文件都被认为是一个 CSS modules 文件, 导入这样的文件会返回一个相应的模块对象</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // vite/client 中申明了所有样式类型文件模块 到处对象是 string类型</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // .module.css 等模块话样式文件 导出对象是 CSSModuleClasses(type CSSModuleClasses = { readonly [key: string]: string })</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Vite 的核心是使用现代浏览器的ESModule功能, 对样式预处理器不支持, 项目中需要安装对应的预处理器依赖</p></li><li><p>禁用 CSS 注入页面 自动注入 CSS 内容的行为可以通过 ?inline 参数来关闭。在关闭时，被处理过的 CSS 字符串将会作为该模块的默认导出，但样式并没有被注入到页面中。</p></li></ul><h2 id="glob-导入" tabindex="-1"><a class="header-anchor" href="#glob-导入"><span>Glob 导入</span></a></h2><p>vite 支持使用特殊的 import.meta.glob 函数从文件系统导入多个模块<br><code>const modules = import.meta.glob(&#39;./dir/*.js&#39;)</code> ===&gt;</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-ts"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> modules</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;./dir/foo.js&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#61AFEF;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./dir/foo.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// value默认懒加载的，通过动态导入实现 并会在构建时分离为独立的 chunk。如果想同步 那么传入 { eager: true } 作为glob的第二个参数</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;./dir/bar.js&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#61AFEF;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./dir/bar.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17)])])}const d=s(l,[["render",n]]),o=JSON.parse('{"path":"/frontEnd/buildTools/vite.html","title":"Vite","lang":"zh-CN","frontmatter":{"description":"Vite 优势: 一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能 使用 Rollup 打包你的代码 Vite 天然支持引入 .ts 文件。 项目模板 vue /react vue-ts/react-ts CLI vite(同 vite dev/ vite serve) 启动开发服务器 vite build 打包 ts vite/cli...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vite\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-22T15:59:37.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeroKing\\",\\"url\\":\\"https://github.com/Hero-King\\",\\"email\\":\\"838774057@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://blog.heroking.top/frontEnd/buildTools/vite.html"}],["meta",{"property":"og:site_name","content":"HeroKing博客"}],["meta",{"property":"og:title","content":"Vite"}],["meta",{"property":"og:description","content":"Vite 优势: 一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能 使用 Rollup 打包你的代码 Vite 天然支持引入 .ts 文件。 项目模板 vue /react vue-ts/react-ts CLI vite(同 vite dev/ vite serve) 启动开发服务器 vite build 打包 ts vite/cli..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-22T15:59:37.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-22T15:59:37.000Z"}]]},"git":{"createdTime":1758556777000,"updatedTime":1758556777000,"contributors":[{"name":"HeroKing-web","username":"HeroKing-web","email":"838774057@qq.com","commits":1,"url":"https://github.com/HeroKing-web"}]},"readingTime":{"minutes":1.59,"words":476},"filePathRelative":"frontEnd/buildTools/vite.md","excerpt":"\\n<p>优势:</p>\\n<ul>\\n<li>一个开发服务器，它基于 原生 ES 模块 提供了 丰富的内建功能</li>\\n<li>使用 Rollup 打包你的代码</li>\\n<li>Vite 天然支持引入 .ts 文件。</li>\\n</ul>\\n<h2>项目模板</h2>\\n<p>vue /react vue-ts/react-ts</p>\\n<h2>CLI</h2>\\n<ul>\\n<li>vite(同 vite dev/ vite serve) 启动开发服务器</li>\\n<li>vite build 打包</li>\\n</ul>\\n<h2>ts</h2>\\n<h3>vite/client</h3>\\n<p>Vite 默认的类型定义是写给它的 Node.js API ,要将其补充到一个 Vite 应用的客户端代码环境中 需要手动让 ts 编译器 获取到 vite/client</p>","autoDesc":true}');export{d as comp,o as data};
