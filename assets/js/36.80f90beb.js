(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{447:function(s,t,e){"use strict";e.r(t);var r=e(33),v=Object(r.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"全栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#全栈"}},[s._v("#")]),s._v(" 全栈")]),s._v(" "),t("p",[s._v("如何成为一个全栈工程师? 前端开发何去何从")]),s._v(" "),t("h2",{attrs:{id:"js-框架概览"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js-框架概览"}},[s._v("#")]),s._v(" JS 框架概览")]),s._v(" "),t("h3",{attrs:{id:"前端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前端"}},[s._v("#")]),s._v(" 前端")]),s._v(" "),t("ul",[t("li",[s._v("nuxt.js 用于 Vue 服务端渲染, 静态站点的框架")]),s._v(" "),t("li",[s._v("next.js 用于 React 服务端渲染,静态站点,客户端渲染的框架")])]),s._v(" "),t("h3",{attrs:{id:"后端"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#后端"}},[s._v("#")]),s._v(" 后端")]),s._v(" "),t("ul",[t("li",[s._v("express")]),s._v(" "),t("li",[s._v("nest 基于 express,类似于 spring 框架, Nest.js 是一个基于 TypeScript 的 Node.js 后端框架，它结合了 OOP（面向对象编程）、FP（函数式编程）和 FRP（函数式响应式编程）等概念，提供了一个优雅且强大的开发平台。")])]),s._v(" "),t("h4",{attrs:{id:"nodejs-orm-框架"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nodejs-orm-框架"}},[s._v("#")]),s._v(" nodejs orm 框架")]),s._v(" "),t("ul",[t("li",[s._v("TypeORM 是一个面向 TypeScript 和 JavaScript 的 ORM 框架，它支持多种数据库，包括 MySQL、PostgreSQL、SQLite 和 Microsoft SQL Server。它提供了实体映射、关联关系、事务支持等功能。")]),s._v(" "),t("li",[s._v("Sequelize: Sequelize 是一个基于 Promise 的 ORM 框架，支持多种数据库，包括 MySQL、PostgreSQL、SQLite 和 MSSQL。它提供了丰富的功能，包括模型定义、关联关系、事务支持、数据验证等")])]),s._v(" "),t("h2",{attrs:{id:"技术选型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#技术选型"}},[s._v("#")]),s._v(" 技术选型")]),s._v(" "),t("ul",[t("li",[s._v("nestjs + typeorm + mysql 进阶后端开发 "),t("code",[s._v("npm install --save @nestjs/typeorm typeorm mysql2")])])]),s._v(" "),t("h3",{attrs:{id:"nestjs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#nestjs"}},[s._v("#")]),s._v(" Nestjs")]),s._v(" "),t("p",[s._v("查看帮助 "),t("code",[s._v("nest --help")])]),s._v(" "),t("p",[s._v("项目创建")]),s._v(" "),t("ul",[t("li",[s._v("nest create 项目名称")]),s._v(" "),t("li",[s._v("pnpm run start:dev 启动开发")]),s._v(" "),t("li",[s._v("nest g res "),t("code",[s._v("<name>")]),s._v(" 生成 res 资源")])]),s._v(" "),t("h3",{attrs:{id:"重要概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重要概念"}},[s._v("#")]),s._v(" 重要概念")]),s._v(" "),t("ul",[t("li",[s._v("控制器@Controller: 路由")]),s._v(" "),t("li",[s._v("提供器@providers: 由 Nestjs 容器管理的 js 类, 框架负责实例化, 管理其生命周期, 作为依赖注入的类")]),s._v(" "),t("li",[s._v("module@Module: nest 组织应用的方式, 应用至少需要有一个根模块\n"),t("ul",[t("li",[s._v("providers: 将由 Nest 注入器实例化并且至少可以在该模块中共享的提供程序")]),s._v(" "),t("li",[s._v("controllers: 此模块中定义的必须实例化的控制器集")]),s._v(" "),t("li",[s._v("imports: 导出此模块所需的提供程序的导入模块列表")]),s._v(" "),t("li",[s._v("exports: 这个模块提供的 providers 的子集应该在导入这个模块的其他模块中可用。你可以使用提供器本身或仅使用其令牌（provide 值）")])])])]),s._v(" "),t("h3",{attrs:{id:"模块"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模块"}},[s._v("#")]),s._v(" 模块")]),s._v(" "),t("p",[s._v("下述中的 "),t("code",[s._v("js类")]),s._v(" 其实是为框架读取使用, 真正导出导入的是容器中帮我们创建好的实例")]),s._v(" "),t("ul",[t("li",[s._v("共享模块: 使用 @Module.exports 导出 "),t("code",[s._v("js类")]),s._v(", 其他需要使用的模块中 @Module.import")]),s._v(" "),t("li",[s._v("全局模块: 在模块上使用@Global()注解, 其他模块直接注入"),t("code",[s._v("js类")]),s._v("即可, 不需要在@Module.import")]),s._v(" "),t("li",[s._v("动态模块: 编写模块类, 实现forRoot静态方法, 返回模块配置对象即可")])])])}),[],!1,null,null,null);t.default=v.exports}}]);