(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{442:function(t,s,n){"use strict";n.r(s);var a=n(33),e=Object(a.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"学习-python-入门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#学习-python-入门"}},[t._v("#")]),t._v(" 学习 python 入门")]),t._v(" "),s("p",[t._v("有多种方式可以运行 Python：\n1、交互式解释器： 你可以通过命令行窗口进入 Python，并在交互式解释器中开始编写 Python 代码。\n2、命令行脚本: 在你的应用程序中通过引入解释器可以在命令行中执行 Python 脚本 python script.py\n3、脚本添加可执行权限 chmod +x test.py # 脚本文件添加可执行权限 ./test.py 执行")]),t._v(" "),s("h3",{attrs:{id:"编译和解释"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编译和解释"}},[t._v("#")]),t._v(" 编译和解释")]),t._v(" "),s("p",[t._v("编译型语言是需要编译器把源代码生成计算机可识别的二进制文件,计算机直接执行 [速度快,跨平台性低] C C++\n解释型语言是解释器读取一行源代码,生成可执行指令,CPU 执行 循环往复 [速度慢,跨平台] python java")]),t._v(" "),s("blockquote",[s("p",[t._v("java 先通过编译成 class 文件,jvm 解释+编译两种方式合并使用运行程序")])]),t._v(" "),s("h3",{attrs:{id:"设计目标"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#设计目标"}},[t._v("#")]),t._v(" 设计目标")]),t._v(" "),s("p",[t._v("简单,开源\n适用于短期开发的日常任务\n开发哲学: 最好只有一种方法实现一个功能")]),t._v(" "),s("h3",{attrs:{id:"为什么用-python"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么用-python"}},[t._v("#")]),t._v(" 为什么用 python")]),t._v(" "),s("p",[t._v("代码量少 通常比 java 少 4/5 ----\x3e 人生苦短 我用 python")]),t._v(" "),s("h3",{attrs:{id:"特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),s("p",[t._v("完全面向对象\n强大的标准库\n社区提供大量的第三方块,科学计算/人工智能/机器学习等")]),t._v(" "),s("h2",{attrs:{id:"基础语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基础语法"}},[t._v("#")]),t._v(" 基础语法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("中文编码\nPython 中默认的编码格式是 ASCII 格式，在没修改编码格式时无法正确打印汉字，所以在读取中文时会报错。\n只要在文件开头加入 # -"),s("em",[t._v("- coding: UTF-8 -")]),t._v("- 或者 # coding=utf-8 就行了\n注意：Python3.X 源码文件默认使用 utf-8 编码，所以可以正常解析中文，无需指定 UTF-8 编码。")])]),t._v(" "),s("li",[s("p",[t._v("Python 标识符\n在 Python 里，标识符由字母、数字、下划线组成。\n在 Python 中，所有标识符可以包括英文、数字以及下划线(_)，但不能以数字开头。\nPython 中的标识符是区分大小写的。\n"),s("em",[t._v("以下划线开头的标识符是有特殊意义的。")]),t._v("\n以单下划线开头"),s("code",[t._v("_foo")]),t._v("的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。\n以双下划线开头的"),s("code",[t._v("__foo")]),t._v("代表类的私有成员，\n以双下划线开头和结尾的"),s("code",[t._v("__foo__")]),t._v("代表 Python 里特殊方法专用的标识，如"),s("code",[t._v("__init__()")]),t._v("代表类的构造函数。\nPython 可以同一行显示多条语句，方法是用分号 ; 分开")])]),t._v(" "),s("li",[s("p",[t._v("行和缩进\n学习 Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。python 最具特色的就是用缩进来写模块。\n缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"True"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"False"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("多行语句(同 linux 的 shell)\nPython 语句中一般以新行作为语句的结束符。\n但是我们可以使用斜杠（ \\）将一行的语句分为多行显示，如下所示：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("total "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" item_one "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" \\\n item_two "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" \\\n item_three\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 \\")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v('Python 引号\nPython 可以使用引号( \' )、双引号( " )、三引号( \'\'\' 或 """ ) 来表示字符串，引号的开始与结束必须是相同类型的。\n其中三引号可以由多行组成，编写多行文本的快捷语法，常用于文档字符串，在文件的特定地点，被当做注释。\n字符串可以用 + 运算符连接在一起，用 * 运算符重复\nword = \'word\'\nsentence = "这是一个句子。"\nparagraph = """这是一个段落。\n包含了多个语句"""')])]),t._v(" "),s("li",[s("p",[t._v("Python 空行\n函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。\n空行与代码缩进不同，空行并不是 Python 语法的一部分。书写时不插入空行，Python 解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。\n记住：空行也是程序代码的一部分。")])]),t._v(" "),s("li",[s("p",[t._v("等待用户输入\n下面的程序执行后就会等待用户输入，按回车键后就会退出：")])])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/python")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("raw_input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"按下 enter 键退出，其他任意键显示...\\n"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("以上代码中 ，\\n 实现换行。一旦用户按下 enter(回车) 键退出，其它键显示。")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("print 默认输出是换行的，如果要实现不换行需要在变量末尾加上逗号 ,")])]),t._v(" "),s("li",[s("p",[t._v("多个语句构成代码组\n缩进相同的一组语句构成一个代码块，我们称之代码组。\n像 if、while、def 和 class 这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。\n我们将首行及后面的代码组称为一个子句(clause)。\n如下实例：")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" expression "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\nsuite\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("elif")]),t._v(" expression "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\nsuite\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\nsuite\n")])])])])]),t._v(" "),s("h2",{attrs:{id:"python-变量类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#python-变量类型"}},[t._v("#")]),t._v(" Python 变量类型")]),t._v(" "),s("p",[t._v("Python 有的数据类型：\nNumbers（数字）\nbool（布尔类型）\nString（字符串）\nList（列表）\nTuple（元组）\nDictionary（字典）")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("字符串:\npython 的字串列表有 2 种取值顺序:\n从左到右索引默认 0 开始的，最大范围是字符串长度少 1\n从右到左索引默认-1 开始的，最大范围是字符串开头\nR U N O O B\n0 1 2 3 4 5\n-6 -5 -4 -3 -2 -1\n从字符串中获取一段子字符串的话，可以使用 [头下标:尾下标] (包含头下标的字符，但不包含尾下标的字符) 来截取相应的字符串\n加号（+）是字符串连接运算符，星号（*）是重复操作。\n截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串")])]),t._v(" "),s("li",[s("p",[t._v('List\n支持截取, 加号 + 是列表连接运算符，星号 * 是重复操作 ["aa","bb"]')])]),t._v(" "),s("li",[s("p",[t._v('set\n无序、可变的数据类型，用于存储唯一的元素\nset1 = {"11","22"}'),s("br"),t._v("\n集合运算:")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[t._v("  a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abracadabra'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  b "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'alacazam'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a 和 b 的差集")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a 和 b 的并集")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a 和 b 的交集")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# a 和 b 中不同时存在的元素")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("元组 tuple\n元组是另一个数据类型，类似于 List（列表）。\n元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。")])])]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/python")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("tuple")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runoob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("786")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.23")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'john'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("70.2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ntinytuple "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'john'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("tuple")]),t._v("               "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出完整元组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("tuple")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出元组的第一个元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("tuple")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出第二个至第四个（不包含）的元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("tuple")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出从第三个开始至列表末尾的所有元素")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" tinytuple "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出元组两次")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("tuple")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" tinytuple   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 打印组合的元组")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("\"\"\"\n('runoob', 786, 2.23, 'john', 70.2)\nrunoob\n(786, 2.23)\n(2.23, 'john', 70.2)\n(123, 'john', 123, 'john')\n('runoob', 786, 2.23, 'john', 70.2, 123, 'john')\n\"\"\"")]),t._v("\n")])])]),s("ul",[s("li",[s("p",[t._v('Python 字典\ndict = {} dict["once"] = 1\ndict2 = {"name" :"wang "}\n字典(dictionary)是除列表以外 python 之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。\n两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。\n字典用"{ }"标识。字典由索引(key)和它对应的值 value 组成。')]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#!/usr/bin/python")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# -*- coding: UTF-8 -*-")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'one'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is one"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"This is two"')]),t._v("\n\ntinydict "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'name'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'runoob'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'code'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6734")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'dept'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sales'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'one'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("          "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出键为'one' 的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("dict")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("              "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出键为 2 的值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" tinydict             "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出完整的字典")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" tinydict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keys"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出所有键")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" tinydict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 输出所有值")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[t._v("\"\"\"\nThis is one\nThis is two\n{'dept': 'sales', 'code': 6734, 'name': 'runoob'}\n['dept', 'code', 'name']\n['sales', 6734, 'runoob']\n\"\"\"")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("Python 数据类型转换\n有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。")])])]),t._v(" "),s("p",[t._v("以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。\nfloat(x) 将 x 转换到一个浮点数")]),t._v(" "),s("h2",{attrs:{id:"运算符-关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#运算符-关键字"}},[t._v("#")]),t._v(" 运算符/关键字")]),t._v(" "),s("ul",[s("li",[t._v("type(var)")]),t._v(" "),s("li",[t._v("isinstance(var, type)")])]),t._v(" "),s("p",[t._v('逻辑运算符\nand x and y 布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。 (a and b) 返回 20。\nor x or y 布尔"或" - 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。 (a or b) 返回 10。\nnot not x 布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。 not(a and b) 返回 False\n成员运算符\n测试实例中包含了一系列的成员，包括字符串，列表或元组。\nin 如果在指定的序列中找到值返回 True，否则返回 False。 x 在 y 序列中 , 如果 x 在 y 序列中返回 True。\nnot in 如果在指定的序列中没有找到值返回 True，否则返回 False。 x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。\n身份运算符\n身份运算符用于比较两个对象的存储单元\nis is 是判断两个标识符是不是引用自一个对象 x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False\nis not is not 是判断两个标识符是不是引用自不同对象 x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。\nis 与 == 区别：')]),t._v(" "),s("p",[s("strong",[t._v("is 用于判断两个变量引用对象是否为同一个(同一块内存空间)， == 用于判断引用变量的值是否相等。")])]),t._v(" "),s("h2",{attrs:{id:"函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[t._v("#")]),t._v(" 函数")]),t._v(" "),s("p",[t._v("定义一个函数\n你可以定义一个由自己想要功能的函数，以下是简单的规则：\n函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。\n任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。\n函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。\n函数内容以冒号起始，并且缩进。\nreturn [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的 return 相当于返回 None。")]),t._v(" "),s("div",{staticClass:"language-python extra-class"},[s("pre",{pre:!0,attrs:{class:"language-python"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("functionname")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" parameters "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"函数_文档字符串"')]),t._v("\n   function_suite\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("expression"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 定义函数")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("printme")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"打印任何传入的字符串"')]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("print")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("str")]),t._v("\n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 调用函数")]),t._v("\nprintme"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"我要调用用户自定义函数!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nprintme"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"再次调用同一函数"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);