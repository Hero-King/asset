import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as a,o as n}from"./app-MIZpsOfp.js";const t={};function h(o,i){return n(),e("div",null,[...i[0]||(i[0]=[a(`<h1 id="h5" tabindex="-1"><a class="header-anchor" href="#h5"><span>H5</span></a></h1><h2 id="钉钉免登流程" tabindex="-1"><a class="header-anchor" href="#钉钉免登流程"><span>钉钉免登流程</span></a></h2><ol><li><p>前端: 获取免登授权码。 code 只能使用一次 并且 5 分钟内失效</p></li><li><p>后端: 获取 AccessToken。调用接口获取 access_token，详情请参考获取企业内部应用的 access_token(有效期 2h 有效期内重复获取会返回相同结果并自动续期, 每个应用的 accessToken 是彼此独立的)</p></li><li><p>后端: userid。调用接口获取用户的 userid，详情请参考通过免登码获取用户信息。能够拿到 userid, device_id(设备 id) associated_unionid(用户关联的 unionId) unionid(用户 unionId) name</p></li><li><p>后端: 获取用户详情。调用接口获取用户详细信息，根据某些特定字段匹配到 PC 端系统中用户 返回用户 token</p></li></ol><h2 id="常规登录设计" tabindex="-1"><a class="header-anchor" href="#常规登录设计"><span>常规登录设计</span></a></h2><h3 id="toc-应用" tabindex="-1"><a class="header-anchor" href="#toc-应用"><span>TOC 应用</span></a></h3><ol><li>获取 h5 端的授权码 code 进行登录, 接口拿到用户信息 id 等数据,创建用户 绑定 token 即可</li><li>如果涉及到多租户, 提供用户选择租户页面,选择租户后带着租户信息然后执行 1 步骤</li></ol><h3 id="tob-应用" tabindex="-1"><a class="header-anchor" href="#tob-应用"><span>TOB 应用</span></a></h3><h4 id="token-不涉及租户情况" tabindex="-1"><a class="header-anchor" href="#token-不涉及租户情况"><span>token 不涉及租户情况</span></a></h4><ol><li>小程序端 wx.login 返回 code 调用 pigx 获取 token。</li><li>若 pigx 返回 200 &amp; access_token， 小程序端保存 access_token ,调用服务端 API 使用。</li><li>若 pigx 返回 401 则未绑定，跳转绑定功能。<br> ⅰ. 使用短信验证码模式登录获取 token<br> ⅱ. 小程序端再次 wx.login 获取 code<br> ⅲ. 调用绑定接口，实现用户&amp;&amp;openid 绑定</li></ol><h4 id="如果需要先选择租户在获取-token-呢或者-token-与租户关联" tabindex="-1"><a class="header-anchor" href="#如果需要先选择租户在获取-token-呢或者-token-与租户关联"><span>如果需要先选择租户在获取 token 呢或者 token 与租户关联</span></a></h4><ul><li>方案一 : 免 token 获取到所有的租户, 选择租户后再获取 H5 授权码登录</li><li>方案二 : 根据用户信息获取绑定的租户列表, 后端需要提供两个接口, A:用于返回租户列表 B:用于返回用户 token, 怎么设计 B 接口在无密码状态安全的拿到 token, 后端接口 A 中返回<code>用过即消</code>数据, 类似免登授权码, 使用过一次就失效</li></ul><h2 id="h5-的各种-id" tabindex="-1"><a class="header-anchor" href="#h5-的各种-id"><span>H5 的各种 id</span></a></h2><h3 id="微信" tabindex="-1"><a class="header-anchor" href="#微信"><span>微信</span></a></h3><ul><li>openid 普通用户的标识，不管是 微信公众号 还是 微信小程序，二者都是在微信公众平台进行管理的，所以他俩就放一起讲，为了识别用户，每个微信用户针对每个 公众号 或者 小程序 会产生一个安全的 OpenID</li><li>UnionID 用户统一标识，针对一个微信开放平台帐号下的应用，同一用户的 unionid 是唯一的</li></ul><h3 id="钉钉" tabindex="-1"><a class="header-anchor" href="#钉钉"><span>钉钉</span></a></h3><p><a href="https://open.dingtalk.com/document/orgapp/basic-concepts">参考</a></p><ul><li>userid 每个钉钉用户都有一个唯一的 userid，用于在钉钉系统中唯一标识一个用户, 创建后不可修改。</li><li>unionid：unionid 是一个跨应用的用户唯一标识符，用于将同一个用户在不同应用之间进行关联。 当一个用户在多个使用钉钉开放平台的应用中登录时，他们的 unionid 会保持一致。 这样可以方便开发者在多个应用之间实现用户信息的共享和关联。</li><li>staffId：staffId 是企业内部员工的工号，用于在企业内部标识员工的唯一标识符。 它通常由企业自己的人力资源系统或员工管理系统提供，并与钉钉系统进行对接，以便在钉钉中进行员工身份认证和管理</li></ul><h2 id="钉钉-h5-会缓存-index-html-需要禁用缓存" tabindex="-1"><a class="header-anchor" href="#钉钉-h5-会缓存-index-html-需要禁用缓存"><span>钉钉 H5 会缓存 index.html,需要禁用缓存</span></a></h2><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-html"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> http-equiv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Cache-Control&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;no-cache, no-store, must-revalidate&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> http-equiv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Pragma&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;no-cache&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">meta</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> http-equiv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Expires&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;0&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="插件" tabindex="-1"><a class="header-anchor" href="#插件"><span>插件</span></a></h2><h3 id="postcss-插件" tabindex="-1"><a class="header-anchor" href="#postcss-插件"><span>postcss 插件</span></a></h3><ul><li>autoprefixer 一个自动补齐 css 浏览器前缀的插件</li><li>tailwindcss</li></ul>`,22)])])}const r=s(t,[["render",h]]),d=JSON.parse('{"path":"/frontEnd/basics/H5.html","title":"H5","lang":"zh-CN","frontmatter":{"description":"H5 钉钉免登流程 前端: 获取免登授权码。 code 只能使用一次 并且 5 分钟内失效 后端: 获取 AccessToken。调用接口获取 access_token，详情请参考获取企业内部应用的 access_token(有效期 2h 有效期内重复获取会返回相同结果并自动续期, 每个应用的 accessToken 是彼此独立的) 后端: useri...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"H5\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-18T00:43:12.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeroKing\\",\\"url\\":\\"https://github.com/Hero-King\\",\\"email\\":\\"838774057@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://blog.heroking.top/frontEnd/basics/H5.html"}],["meta",{"property":"og:site_name","content":"HeroKing博客"}],["meta",{"property":"og:title","content":"H5"}],["meta",{"property":"og:description","content":"H5 钉钉免登流程 前端: 获取免登授权码。 code 只能使用一次 并且 5 分钟内失效 后端: 获取 AccessToken。调用接口获取 access_token，详情请参考获取企业内部应用的 access_token(有效期 2h 有效期内重复获取会返回相同结果并自动续期, 每个应用的 accessToken 是彼此独立的) 后端: useri..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-18T00:43:12.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-18T00:43:12.000Z"}]]},"git":{"createdTime":1758156192000,"updatedTime":1758156192000,"contributors":[{"name":"HeroKing-web","username":"HeroKing-web","email":"838774057@qq.com","commits":1,"url":"https://github.com/HeroKing-web"}]},"readingTime":{"minutes":3.09,"words":926},"filePathRelative":"frontEnd/basics/H5.md","excerpt":"\\n<h2>钉钉免登流程</h2>\\n<ol>\\n<li>\\n<p>前端: 获取免登授权码。 code 只能使用一次 并且 5 分钟内失效</p>\\n</li>\\n<li>\\n<p>后端: 获取 AccessToken。调用接口获取 access_token，详情请参考获取企业内部应用的 access_token(有效期 2h 有效期内重复获取会返回相同结果并自动续期, 每个应用的 accessToken 是彼此独立的)</p>\\n</li>\\n<li>\\n<p>后端: userid。调用接口获取用户的 userid，详情请参考通过免登码获取用户信息。能够拿到 userid, device_id(设备 id) associated_unionid(用户关联的 unionId) unionid(用户 unionId) name</p>\\n</li>\\n<li>\\n<p>后端: 获取用户详情。调用接口获取用户详细信息，根据某些特定字段匹配到 PC 端系统中用户 返回用户 token</p>\\n</li>\\n</ol>","autoDesc":true}');export{r as comp,d as data};
