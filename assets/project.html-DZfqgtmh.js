import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as n,o as a}from"./app-DBPKkMTa.js";const i={};function o(l,t){return a(),r("div",null,[...t[0]||(t[0]=[n('<h1 id="前端工程" tabindex="-1"><a class="header-anchor" href="#前端工程"><span>前端工程</span></a></h1><h2 id="代码规范" tabindex="-1"><a class="header-anchor" href="#代码规范"><span>代码规范</span></a></h2><h3 id="识别几个常用工具" tabindex="-1"><a class="header-anchor" href="#识别几个常用工具"><span>识别几个常用工具</span></a></h3><ul><li><a href="https://typicode.github.io/husky/zh/" target="_blank" rel="noopener noreferrer">Husky</a> 在git commit之前执行自定义命令, 可以对代码、文件等进行预设的检查，一旦检查不通过，就可以阻止当前的代码提交</li><li><a href="https://zh-hans.eslint.org/docs/latest/use/getting-started" target="_blank" rel="noopener noreferrer">Eslint</a> 根据方案识别并报告 ECMAScript/JavaScript 代码问题的工具</li><li><a href="https://www.prettier.cn/docs/install.html" target="_blank" rel="noopener noreferrer">Prettier</a> 代码格式化工具</li><li><a href="https://github.com/lint-staged/lint-staged?tab=readme-ov-file#configuration" target="_blank" rel="noopener noreferrer">Lint-staged</a> 对暂存区代码执行自定义命令; 随着项目体量的增大，全量跑一次 lint 的时间越来越长。同时如果每一个人提交的代码都是通过了 lint 工具的格式化，仓库中的代码将都是规范的, 只需要对本次提交的代码做规范检查</li></ul><p><strong>常规代码风格检查只需要在 .husky/pre-commit 文件中增加npx lint-staged 的脚本, 在package.json中配置lint-staged任务(根据不同的文件类型执行some linters, like ESLint or Prettier)即可</strong></p><h3 id="prettier规则" tabindex="-1"><a class="header-anchor" href="#prettier规则"><span>Prettier规则</span></a></h3>',6)])])}const c=e(i,[["render",o]]),h=JSON.parse('{"path":"/frontEnd/project/project.html","title":"前端工程","lang":"zh-CN","frontmatter":{"description":"前端工程 代码规范 识别几个常用工具 Husky 在git commit之前执行自定义命令, 可以对代码、文件等进行预设的检查，一旦检查不通过，就可以阻止当前的代码提交 Eslint 根据方案识别并报告 ECMAScript/JavaScript 代码问题的工具 Prettier 代码格式化工具 Lint-staged 对暂存区代码执行自定义命令; 随...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"前端工程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-22T02:09:06.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeroKing\\",\\"url\\":\\"https://github.com/Hero-King\\",\\"email\\":\\"838774057@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://blog.heroking.top/frontEnd/project/project.html"}],["meta",{"property":"og:site_name","content":"HeroKing博客"}],["meta",{"property":"og:title","content":"前端工程"}],["meta",{"property":"og:description","content":"前端工程 代码规范 识别几个常用工具 Husky 在git commit之前执行自定义命令, 可以对代码、文件等进行预设的检查，一旦检查不通过，就可以阻止当前的代码提交 Eslint 根据方案识别并报告 ECMAScript/JavaScript 代码问题的工具 Prettier 代码格式化工具 Lint-staged 对暂存区代码执行自定义命令; 随..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-22T02:09:06.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-22T02:09:06.000Z"}]]},"git":{"createdTime":1758506946000,"updatedTime":1758506946000,"contributors":[{"name":"HeroKing-web","username":"HeroKing-web","email":"838774057@qq.com","commits":1,"url":"https://github.com/HeroKing-web"}]},"readingTime":{"minutes":0.84,"words":252},"filePathRelative":"frontEnd/project/project.md","excerpt":"\\n<h2>代码规范</h2>\\n<h3>识别几个常用工具</h3>\\n<ul>\\n<li><a href=\\"https://typicode.github.io/husky/zh/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Husky</a> 在git commit之前执行自定义命令, 可以对代码、文件等进行预设的检查，一旦检查不通过，就可以阻止当前的代码提交</li>\\n<li><a href=\\"https://zh-hans.eslint.org/docs/latest/use/getting-started\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Eslint</a> 根据方案识别并报告 ECMAScript/JavaScript 代码问题的工具</li>\\n<li><a href=\\"https://www.prettier.cn/docs/install.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Prettier</a> 代码格式化工具</li>\\n<li><a href=\\"https://github.com/lint-staged/lint-staged?tab=readme-ov-file#configuration\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Lint-staged</a> 对暂存区代码执行自定义命令;  随着项目体量的增大，全量跑一次 lint 的时间越来越长。同时如果每一个人提交的代码都是通过了 lint 工具的格式化，仓库中的代码将都是规范的, 只需要对本次提交的代码做规范检查</li>\\n</ul>","autoDesc":true}');export{c as comp,h as data};
