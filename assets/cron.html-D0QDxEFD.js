import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as o,o as e}from"./app-XKCljP8-.js";const c={};function t(l,n){return e(),a("div",null,[...n[0]||(n[0]=[o(`<h1 id="cron-定时任务" tabindex="-1"><a class="header-anchor" href="#cron-定时任务"><span>cron 定时任务</span></a></h1><blockquote><p><a href="https://www.cnblogs.com/zhoul/p/9931664.html" target="_blank" rel="noopener noreferrer">https://www.cnblogs.com/zhoul/p/9931664.html</a><br> 在 linux 下，如果想要在未来的某个时刻执行某个任务，并且在未来的每一个这样的时刻里都要执行这个任务。举个简单的例子，比如说想要在将来，<br> 每天的十二点都重启路由器，大多数发行版都自带一个守护进程（daemon）cron 来完成这项工作。这篇文章主要介绍了在 linux 上定期执行命令、脚本<br> （cron，crontab，anacron）的相关知识</p></blockquote><h2 id="cron-crontab-以及-anacron-的关系" tabindex="-1"><a class="header-anchor" href="#cron-crontab-以及-anacron-的关系"><span>cron，crontab 以及 anacron 的关系</span></a></h2><p>cron 是大多数 linux 发行版都自带的守护进程（daemon），用来重复运行某些被设定好了确定的运行时间的任务，这些任务可以是每个月运行、每周运行、每天运行，<br> 甚至是每一分钟运行。用 cron 执行的任务适合于 24 小时运行的机器，cron 执行的任务会在设定好的时刻执行，当机器处于关机状态下并错过了任务执行的时间，<br> cron 任务就无法预期执行了。<br> crontab(cron table 的简称)既可以指 cron 用来定期执行特定任务所需要的列表文件，又可以指用来创建、删除、查看当前用户（或者指定用户）的 crontab 文件的命令。</p><p>anacron 不是守护进程，可以看做是 cron 守护进程的某种补充程序，anacron 是独立的 linux 程序，被 cron 守护进程或者其他开机脚本启动运行，可以每天、每周、<br> 每个月周期性地执行一项任务（最小单位为天）。适合于可能经常会关机的机器，当机器重新开机 anacron 程序启动之后，<br> anacron 会检查 anacron 任务是否在合适的周期执行了，如果未执行则在 anacron 设定好的延迟时间之后只执行一次任务，而不管任务错过了几次周期。<br> 举个例子，比如你设定了一个每周备份文件的任务，但是你的电脑因为你外出度假而处于关机状态四周，当你回到家中开机后，anacron 会在延迟一定时间之后只备份一次文件。由于发行版的不同，cron 守护进程如何运行 anacron 会有所不同。</p><h2 id="crontab-命令-crontab-文件语法" tabindex="-1"><a class="header-anchor" href="#crontab-命令-crontab-文件语法"><span>crontab 命令，crontab 文件语法</span></a></h2><p>系统默认 crontab 文件为/etc/crontab,以及/etc/cron.d/目录下的文件，有些程序会把自己的 crontab 文件放在/etc/cron.d/目录下。<br> 要修改/etc/crontab 以及/etc/cron.d/目录下的文件需要 root 权限。cron 守护进程会检查/etc/crontab 以及/etc/cron.d/目录下的文件，<br> 根据这些文件中的 cron 任务所设置的执行时间决定是否执行任务，如果当前时间与 cron 任务所设置的执行时间相同，则执行任务。</p><p>每个用户自己的 crontab 文件都会被放在 /var/spool/cron 目录下，默认为空，可以使用 crontab 命令创建。<br> cron 守护进程会检查/var/spool/cron 目录下的文件，根据这些文件中的 cron 任务所设置的执行时间决定是否执行任务，<br> 如果当前时间与 cron 任务所设置的执行时间相同，则执行任务。</p><p>当 cron 的配置文件发生改变时，不需要重置 cron 守护进程。cron 守护进程会检查配置文件的变化。</p><p>创建自己的 crontab 之前，首先要设置环境变量 EDITOR,cron 进程根据它来确定使用哪个编辑器编辑 crontab 文件。<br> 在 home 目录下的.bashrc 或者.profile 里加入一行 #你也可以使用自己喜爱的其他终端编辑器<br> EDITOR=vim; export EDITOR</p><p>使用 crontab -h 查看帮助<br> 当用 crontab -e <strong>编辑当前用户的 crontab 文件时，首先写入以下内容</strong>。<br> 1 # crontab -e<br> 2 SHELL=/bin/bash<br> 3 <a href="mailto:MAILTO=root@example.com" target="_blank" rel="noopener noreferrer">MAILTO=root@example.com</a><br> 4 PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin<br> 5<br> 6 # For details see man 4 crontabs<br> 7<br> 8 # Example of job definition:<br> 9 # .---------------- minute (0 - 59)<br> 10 # | .------------- hour (0 - 23)<br> 11 # | | .---------- day of month (1 - 31)<br> 12 # | | | .------- month (1 - 12) OR jan,feb,mar,apr ...<br> 13 # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat<br> 14 # | | | | |<br> 15 # * * * * * user-name command to be executed</p><p>该文件的前三行代码设置了默认环境。cron 守护进程并不提供任何环境。SHELL 变量设置当 cron 任务(命令以及脚本)运行时的 shell,<br> MAILTO 变量设置 cron 任务执行结果发送的邮箱，PATH 设置去哪些目录下寻找 cron 任务的命令。<br> 注释部分则解释一条 cron 任务的构成，一条 cron 任务就是一行，要设置多少条 cron 任务则写多少行。一条 cron 任务由七个部分组成，从左到右依次为：</p><p>分钟（0-59）<br> 小时（0-23）<br> 天（1-31）<br> 月 （1-12）：或者可以使用月份的英文单词的前三个字母，比如 jan,feb,mar,apr...<br> 星期（0-6）：星期天用 0 或者 7 都可以，或者可以使用星期的英文单词的前三个字母，比如 sun,mon,tue,wed,thu,fri,sat<br> 用户名称（可以省略）<br> 要执行的命令或者脚本目录<br> 前五个部分的编写注意特殊符号的含义：</p><p>如果你想匹配取值范围内的所有值，使用“<em>”<br> 想匹配某些特殊的值，使用“,”，比如 2,4,7 就匹配的是 2，4 以及 7。<br> 两个值被“-”连接表示范围，此时匹配的是范围内所有值，包含“-”两边的值，比如 4-7 匹配的就是从 4 到 7。<br> 想要表达每隔一段时间执行一次任务，使用 “/”， 比如分钟部分中的 “</em>/10”表示每 10 分钟运行一次，比如小时部分中的“10-22/2”则表示在早上 10 点到晚上 10 点这段时间内，每隔两个小时运行一次。 注意 ：当“/”左边的值可以除尽“/”右边的值时，任务才会运行。</p><p>举例：<br> 每天凌晨执行<br> 0 0 * * * root command</p><p>每周星期天早上五点执行<br> 0 5 * * sun root command</p><p>每个月的前 10 天晚上 10 点开始每隔 10 分钟执行一次命令<br> _/10 22 1-10 _ * root command</p><p>从星期一到五，每个小时的第 10 分钟、第 20 分钟以及第 30 分钟都执行一次命令<br> 10,20,30 * * * 1-5 root command</p><p>特殊简便写法：<br> @hourly 代表 0 * * * _ ，每个小时运行一次<br> @daily 代表 0 0 _ * _ ，每天凌晨运行一次<br> @weekly 代表 0 0 _ _ 0 ，每周星期天凌晨运行一次<br> @monthly 代表 0 0 1 _ _ ，每个月第一天凌晨运行一次<br> @yearly 代表 0 0 1 1 _ ，每年的头一分钟运行一次<br> @reboot 重启后执行一次</p><p>你可以把需要每个小时运行一次的脚本放到/etc/cron.hourly 目录下，cron 守护进程会每个小时都运行一次。<br> 当然/etc 下面还有 cron.daily/ cron.hourly/ cron.monthly/ weekly/</p><h2 id="限制可以使用-cron-的用户" tabindex="-1"><a class="header-anchor" href="#限制可以使用-cron-的用户"><span>限制可以使用 cron 的用户</span></a></h2><p>在/etc/目录下，可能默认会有 cron.allow 以及 cron.deny 文件，也可能没有，没有的情况下可以自己创建，cron.allow 文件包含了可以使用 cron 的用户名，cron.deny 文件包含了不可以使用 cron 的用户名。两个文件中每个用户名占一行，并且不允许出现空格。</p><p>root 用户在任何情况下都可以使用 cron。</p><p>假如 cron.allow 存在，则只有列在这个文件中的用户名可以使用 cron,这时候 cron.deny 被忽视。</p><p>假如 cron.allow 不存在，则列在 cron.deny 文件中的用户名不可以使用 cron。</p><h2 id="用-anacron-执行周期性的任务" tabindex="-1"><a class="header-anchor" href="#用-anacron-执行周期性的任务"><span>用 anacron 执行周期性的任务</span></a></h2><p>anacron 程序可以周期性的执行任务，但具体执行时间并不确定。可以每天、每周、每个月周期性的执行任务。当 anacron 的配置文件发生改变时，下一次 anacron 运行时会检查到配置文件的变化。anacron 的配置文件为/etc/anacrontab,编辑需要 root 权限，默认以下内容：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span># See anacron(8) and anacrontab(5) for details.</span></span>
<span class="line"><span>SHELL=/bin/sh</span></span>
<span class="line"><span>PATH=/sbin:/bin:/usr/sbin:/usr/bin</span></span>
<span class="line"><span>MAILTO=root</span></span>
<span class="line"><span># the maximal random delay added to the base delay of the jobs</span></span>
<span class="line"><span>RANDOM_DELAY=45</span></span>
<span class="line"><span># the jobs will be started during the following hours only</span></span>
<span class="line"><span>START_HOURS_RANGE=3-22</span></span>
<span class="line"><span>#period in days delay in minutes job-identifier command</span></span>
<span class="line"><span>1  5  cron.daily    nice run-parts /etc/cron.daily</span></span>
<span class="line"><span>7  25  cron.weekly    nice run-parts /etc/cron.weekly</span></span>
<span class="line"><span>@monthly 45  cron.monthly   nice run-parts /etc/cron.monthly</span></span>
<span class="line"><span>可以看到前三行设置了默认环境，RANDOM_DELAY变量设置了最大延迟执行时间，START_HOURS_RANGE变量设置了anacron任务执行的时间范围，默认在每天的3点到22点之间。最后三行则设置了三条默认的anacron任务，分别是每天执行，每周执行，每月执行。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="anacron-文件语法" tabindex="-1"><a class="header-anchor" href="#anacron-文件语法"><span>anacron 文件语法</span></a></h3><p>观察前面三条默认的 anacron 任务，可以看到一条 anacron 任务分为四个部分，从左到右依次为：</p><p>周期（天）：设置任务执行的频率，以 天数 为单位，写 1 则代表每天执行，写 3 则代表每 3 天执行，可以使用特殊符号“@”， @daily 代表每天， @weekly 代表每周， @monthly 代表每月。<br> 延迟时间：设置任务的延迟时间，以 分钟 为单位，比如写 5，则当 anacron 启动后，anacron 等待 5 分钟就会执行该任务。设置延迟时间是为了当机器启动时不会因为执行很多 anacron 任务而过载。<br> 任务标识：其目的是识别消息，日志文件和执行特殊操作。<br> 要执行的命令<br> 在/etc/anacrontab 中的三条默认 anacron 任务中，nice 命令用来调整后面命令的优先级，run-parts 命令用来执行设置的目录下的所有脚本，就是说这三条任务分别每天，每周，每月执行/etc/cron.daily，/etc/cron.weekly，/etc/cron.monthly 目录下的脚本。所以我们不用自己往/etc/anacrontab 中添加 anacrontab 任务，而只需把脚本放到相应的目录下，anacron 就会周期性的执行这些脚本了。</p><h3 id="_3-2-anacron-如何运行" tabindex="-1"><a class="header-anchor" href="#_3-2-anacron-如何运行"><span>3.2.anacron 如何运行</span></a></h3><p>既然 anacron 不是守护进程，那它是如何做到周期性执行任务的呢？在 centos7 下，cron 会运行/etc/cron.d/0hourly，在/etc/cron.d/0hourly 文件里，<br> 有一条 cron 任务是这样的：<br> 01 * * * * root run-parts /etc/cron.hourly<br> 这条 cron 任务会运行/etc/cron.hourly 目录下的所有脚本，其中有一个名为 0anacron 的脚本，该脚本则会在合适的时间运行 anacron,<br> anacron 则会检查/etc/anacrontab,在合适的时间分别运行/etc/cron.daily，/etc/cron.weekly，/etc/cron.monthly 目录下的脚本。</p><p>系统建立的时间任务配置文件：<br> vim /etc/crontab 记录“系统中”默认定义的一些计划任务。<br> SHELL=/bin/bash<br> PATH=/sbin:/bin:/usr/sbin:/usr/bin<br> MAILTO=root<br> HOME=/</p><h2 id="run-parts" tabindex="-1"><a class="header-anchor" href="#run-parts"><span>run-parts</span></a></h2><p>01 * * * _ root run-parts /etc/cron.hourly<br> 02 4 _ * _ root run-parts /etc/cron.daily<br> 22 4 _ _ 0 root run-parts /etc/cron.weekly<br> 42 4 1 _ * root run-parts /etc/cron.monthly</p><ul><li><ul><li><ul><li><ul><li><ul><li>root /bin/echo &quot;111111111&quot; &gt; /dev/pts/0 （直接写命令）</li></ul></li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li><ul><li>root /test/dir1/test.sh （运行单个脚本）</li></ul></li></ul></li></ul></li></ul></li><li><ul><li><ul><li><ul><li><ul><li>root run-parts /test/dir1 （运行目录下的所有可执行程序）</li></ul></li></ul></li></ul></li></ul></li></ul><p>注意，写在这里的时间任务必须指明 运行该命令的用户身份<br> 一般都是 root<br> run-parts:可以执行某个目录下的所有脚本文件</p><blockquote><p>Linux 进行工作排程的种类有两种，<br> at 是执行突发性的 乐意处理并执行一次就结束的，依赖于 atd 这个服务<br> crontab 这个指令是周期性的 也可以编辑文件<br> Linux 中有很多的周期性工作要做的 比如周期更新 locate 数据库，文件位于/var/lib/mlocate</p></blockquote><pre><code>比如RPM登陆文件的建立
</code></pre><p>At 设置好的定时任务 可以通过 atq 查询，通过 atrm 删除</p>`,41)])])}const p=r(c,[["render",t]]),b=JSON.parse('{"path":"/system/linux/cron.html","title":"cron 定时任务","lang":"zh-CN","frontmatter":{"description":"cron 定时任务 https://www.cnblogs.com/zhoul/p/9931664.html 在 linux 下，如果想要在未来的某个时刻执行某个任务，并且在未来的每一个这样的时刻里都要执行这个任务。举个简单的例子，比如说想要在将来， 每天的十二点都重启路由器，大多数发行版都自带一个守护进程（daemon）cron 来完成这项工作。这篇...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"cron 定时任务\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-22T06:00:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"HeroKing\\",\\"url\\":\\"https://github.com/Hero-King\\",\\"email\\":\\"838774057@qq.com\\"}]}"],["meta",{"property":"og:url","content":"https://blog.heroking.top/system/linux/cron.html"}],["meta",{"property":"og:site_name","content":"HeroKing博客"}],["meta",{"property":"og:title","content":"cron 定时任务"}],["meta",{"property":"og:description","content":"cron 定时任务 https://www.cnblogs.com/zhoul/p/9931664.html 在 linux 下，如果想要在未来的某个时刻执行某个任务，并且在未来的每一个这样的时刻里都要执行这个任务。举个简单的例子，比如说想要在将来， 每天的十二点都重启路由器，大多数发行版都自带一个守护进程（daemon）cron 来完成这项工作。这篇..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-22T06:00:26.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-22T06:00:26.000Z"}]]},"git":{"createdTime":1758520826000,"updatedTime":1758520826000,"contributors":[{"name":"HeroKing-web","username":"HeroKing-web","email":"838774057@qq.com","commits":1,"url":"https://github.com/HeroKing-web"}]},"readingTime":{"minutes":9.61,"words":2882},"filePathRelative":"system/linux/cron.md","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://www.cnblogs.com/zhoul/p/9931664.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.cnblogs.com/zhoul/p/9931664.html</a><br>\\n在 linux 下，如果想要在未来的某个时刻执行某个任务，并且在未来的每一个这样的时刻里都要执行这个任务。举个简单的例子，比如说想要在将来，<br>\\n每天的十二点都重启路由器，大多数发行版都自带一个守护进程（daemon）cron 来完成这项工作。这篇文章主要介绍了在 linux 上定期执行命令、脚本<br>\\n（cron，crontab，anacron）的相关知识</p>\\n</blockquote>","autoDesc":true}');export{p as comp,b as data};
